---
layout: post
title: "Syntax"
date: "2018-08-26 12:55:36 -0700"
categories: JavaScript
description: Basic Syntax + for...in / for...of loops
---

üîç [let and const](#let-and-const) üîç [Template Literals](#template-literals) üîç [Destructuring](#destructuring) üîç [Object Literal Shorthand](#object-literal-shorthand) üîç [Iteration - loop family](#iteration) üîç [Spread Operator](#spread-operator)   üîç [Rest Parameter](#rest-parameter)

---

#### Hoisting

Hoisting is a result of how JavaScript is interpreted by your browser. Essentially, before any JavaScript code is executed, all variables are "hoisted", which means they're raised to the top of the function scope. So at run-time, the `getClothing()` function actually looks more like this‚Ä¶

Without Hoisting...

{% highlight js %}
function getClothing(isCold) {
  if (isCold) {
    var freezing = 'Grab a jacket!';
  } else {
    var hot = 'It‚Äôs a shorts kind of day.';
    console.log(freezing);
  }
}
{% endhighlight %}

With Hoisting...

{% highlight js %}
function getClothing(isCold) {
  var freezing, hot;
  if (isCold) {
    freezing = 'Grab a jacket!';
  } else {
    hot = 'It‚Äôs a shorts kind of day.';
    console.log(freezing);
  }
}
{% endhighlight %}

## let and const

Variables declared with `let` and `const` eliminate this specific issue of hoisting because they‚Äôre scoped to the block, not to the function. Previously, when you used `var`, variables were either scoped globally or locally to an entire function scope.

If a variable is declared using `let` or `const` inside a block of code (denoted by curly braces `{ }`), then the variable is stuck in what is known as the temporal dead zone until the variable‚Äôs declaration is processed. This behavior prevents variables from being accessed only until after they‚Äôve been declared.

{% highlight js %}
function getClothing(isCold) {
  if (isCold) {
    let freezing = 'Grab a jacket!';
  } else {
    let hot = 'It‚Äôs a shorts kind of day.';
    console.log(freezing);
  }
}
{% endhighlight %}

#### üëì Read more about Links at:

  - [3wschools - let](https://www.w3schools.com/js/js_let.asp)

  - [3wschools - const](https://www.w3schools.com/js/js_const.asp)


## Rules for using let and const

`let` and `const` also have some other interesting properties.

  - Variables declared with `let` can be reassigned, but can‚Äôt be redeclared in the same scope.

  - Variables declared with `const` must be assigned an initial value, but can‚Äôt be redeclared in the same scope, and can‚Äôt be reassigned.

## Use cases

The big question is when should you use `let` and `const`? The general rule of thumb is as follows:

  - use `let` when you plan to reassign new values to a variable

  - use `const` when you don‚Äôt plan on reassigning new values to a variable

Since `const` is the strictest way to declare a variable, we suggest that you always declare variables with `const` because it'll make your code easier to reason about since you know the identifiers won't change throughout the lifetime of your program. If you find that you need to update a variable or change it, then go back and switch it from `const` to `let`.

## What about var?

Is there any reason to use `var` anymore? Not really.

There are some arguments that can be made for using `var` in situations where you want to globally define variables, but this is often considered bad practice and should be avoided. From now on, we suggest ditching `var` in place of using `let` and `const`.

## Prior to ES6...

the old way to concatenate strings together was by using the string concatenation operator ( `+` ).

{% highlight js %}
const student = {
  name: 'Richard Kalehoff',
  guardian: 'Mr. Kalehoff'
};

const teacher = {
  name: 'Mrs. Wilson',
  room: 'N231'
}

let message = student.name + ' please see ' + teacher.name + ' in ' + teacher.room + ' to pick up your report card.';
{% endhighlight %}

Console will print: `Richard Kalehoff please see Mrs. Wilson in N231 to pick up your report card.`

This works alright, but it gets more complicated when you need to build multi-line strings.

{% highlight js %}
let note = teacher.name + ',\n\n' +
  'Please excuse ' + student.name + '.\n' +
  'He is recovering from the flu.\n\n' +
  'Thank you,\n' +
  student.guardian;
{% endhighlight %}

Console will print:

{% highlight html %}
Mrs. Wilson,

Please excuse Richard Kalehoff.
He is recovering from the flu.

Thank you,
Mr. Kalehoff
{% endhighlight %}

However, that‚Äôs changed with the introduction of template literals (previously referred to as "template strings" in development releases of ES6).

üí• As an alternative to using the string concatenation operator ( `+` ), you can use the String's `concat()` method, but both options are rather clunky for simulating true [string interpolation](https://en.wikipedia.org/wiki/String_interpolation).

## Template Literals

Template literals are essentially string literals that include embedded expressions.

Denoted with backticks ( ) instead of single quotes ( `''` ) or double quotes ( `""` ), template literals can contain placeholders which are represented using `${expression}`. This makes it much easier to build strings.

Here's the previous examples using template literals.

{% highlight js %}
let message = `${student.name} please see ${teacher.name} in ${teacher.room} to pick up your report card.`;
{% endhighlight %}

Console will print: `Richard Kalehoff please see Mrs. Wilson in N231 to pick up your report card.`

By using template literals, you can drop the quotes along with the string concatenation operator. Also, you can reference the object's properties inside expressions.

Here‚Äôs where template literals really shine. In above, the quotes and string concatenation operator have been dropped, as well as the newline characters ( `\n` ). That's because template literals also preserve newlines as part of the string!

{% highlight js %}
let note = `${teacher.name}.

  Please excuse ${student.name}.
  He is recovering from the flu.

  Thank you,
  ${student.guardian}`;
{% endhighlight %}

Console will print the same:

{% highlight html %}
Mrs. Wilson,

Please excuse Richard Kalehoff.
He is recovering from the flu.

Thank you,
Mr. Kalehoff
{% endhighlight %}

üí• Embedded expressions inside template literals can do more than just reference variables. You can perform operations, call functions and use loops inside embedded expressions!

## Destructuring

In ES6, you can extract data from arrays and objects into distinct variables using `destructuring`.

This probably sounds like something you‚Äôve done before, for example, look at the two code snippets below that extract data using pre-ES6 techniques:

{% highlight js %}
const point = [10, 25, -34];

const x = point[0];
const y = point[1];
const z = point[2];

console.log(x, y, z);
{% endhighlight %}

Console will print: `10 25 -34`

The example above shows extracting values from an array.

{% highlight js %}
const gemstone = {
  type: 'quartz',
  color: 'rose',
  carat: 21.29
};

const type = gemstone.type;
const color = gemstone.color;
const carat = gemstone.carat;

console.log(type, color, carat);
{% endhighlight %}

Console will print: `quartz rose 21.29`

And this example shows extracting values from an object.

Both are pretty straightforward, however, neither of these examples are actually using destructuring.

#### So what exactly is destructuring?

Destructuring borrows inspiration from languages like [Perl](https://en.wikipedia.org/wiki/Perl) and [Python](https://en.wikipedia.org/wiki/Python_%28programming_language%29) by allowing you to specify the elements you want to extract from an array or object on the left side of an assignment. It sounds a little weird, but you can actually achieve the same result as before, but with much less code; and it's still easy to understand.

Let‚Äôs take a look at both examples rewritten using destructuring.

#### Destructuring values from an array

{% highlight js %}
const point = [10, 25, -34];

const [x, y, z] = point;

console.log(x, y, z);
{% endhighlight %}

Console will print the same: `10 25 -34`

In this example, the brackets `[ ]` represent the array being destructured and `x`, `y`, and `z` represent the variables where you want to store the values from the array. Notice how you don‚Äôt have to specify the indexes for where to extract the values from because the indexes are implied.

üí• You can also ignore values when destructuring arrays. For example, `const [x, , z] = point`; ignores the `y` coordinate and discards it.

#### Destructuring values from an object

{% highlight js %}
const gemstone = {
  type: 'quartz',
  color: 'rose',
  carat: 21.29
};

const {type, color, carat} = gemstone;

console.log(type, color, carat);
{% endhighlight %}

Console will print the same: `quartz rose 21.29`

In this example, the curly braces `{ }` represent the object being destructured and `type`, `color`, and `carat` represent the variables where you want to store the properties from the object. Notice how you don‚Äôt have to specify the property from where to extract the values. Because `gemstone` has a property named `type`, the value is automatically stored in the `type` variable. Similarly, `gemstone` has a `color` property, so the value of `color` automatically gets stored in the `color` variable. And it's the same with `carat`.

üí• You can also specify the values you want to select when destructuring an object. For example, `let {color} = gemstone`; will only select the color property from the gemstone object.

#### Quick example

Direction:

What do you expect to be returned from calling `getArea()`?

{% highlight js %}
const circle = {
  radius: 10,
  color: 'orange',
  getArea: function() {
    return Math.PI * this.radius * this.radius;
  },
  getCircumference: function() {
    return 2 * Math.PI * this.radius;
  }
};

let {radius, getArea, getCircumference} = circle;
{% endhighlight %}

Console will print: `NaN`

Calling `getArea()` will return `NaN`. When you destructure the object and store the `getArea()` method into the `getArea` variable, it no longer has access to `this` in the `circle` object which results in an area that is `NaN`.

Direction:

Use array destructuring to pull out the three colors from the array of things and store them into the variables one, two, and three.

{% highlight js %}
const things = ['red', 'basketball', 'paperclip', 'green', 'computer', 'earth', 'udacity',
'blue', 'dogs'];

const [one,,,two,,,,three] = things;

const colors = `List of Colors
1. ${one}
2. ${two}
3. ${three}`;

console.log(colors);
{% endhighlight %}

{% highlight html %}
List of Colors
1. red
2. green
3. blue
{% endhighlight %}

## Object Literal Shorthand

A recurring trend in ES6 is to remove unnecessary repetition in your code. By removing unnecessary repetition, your code becomes easier to read and more concise. This trend continues with the introduction of new shorthand ways for initializing objects and adding methods to objects.

Let‚Äôs see what those look like.

#### Object literal shorthand

You‚Äôve probably written code where an object is being initialized using the same property names as the variable names being assigned to them.

But just in case you haven‚Äôt, here‚Äôs an example.

{% highlight js %}
let type = 'quartz';
let color = 'rose';
let carat = 21.29;

const gemstone = {
  type: type,
  color: color,
  carat: carat
};

console.log(gemstone);
{% endhighlight %}

Console will print: `Object {type: "quartz", color: "rose", carat: 21.29}`

Do you see the repetition? Doesn't `type: type`, `color: color`, and `carat:carat` seem redundant?

The good news is that you can remove those duplicate variables names from object properties _if_ the properties have the same name as the variables being assigned to them.

Check it out!

{% highlight js %}
let type = 'quartz';
let color = 'rose';
let carat = 21.29;

const gemstone = { type, color, carat};

console.log(gemstone);
{% endhighlight %}

Speaking of shorthand, there‚Äôs also a shorthand way to add methods to objects.

To see how that looks, let‚Äôs start by adding a `calculateWorth()` method to our `gemstone` object. The `calculateWorth()` method will tell us how much our gemstone costs based on its `type`, `color`, and `carat`.

{% highlight js %}
let type = 'quartz';
let color = 'rose';
let carat = 21.29;

const gemstone = {
  type,
  color,
  carat,
  calculateWorth: function() {
    // will calculate worth of gemstone based on type, color, and carat
  }
};
{% endhighlight %}

In this example, an anonymous function is being assigned to the property `calculateWorth`, but is the function keyword really needed? In ES6, it‚Äôs not!

#### Shorthand method names

Since you only need to reference the gemstone‚Äôs `calculateWorth` property in order to call the function, having the function keyword is redundant, so it can be dropped.

{% highlight js %}
let gemstone = {
  type,
  color,
  carat,
  calculateWorth() { ... }
};
{% endhighlight %}

## Iteration

The variable ` i ` is used because "iterator" starts with a "i".

Iterable Protocol : allows JavaScript objects to define or customize their iteration behavior

for...of loop : a loop that iterate over iterable objects

#### Family of For Loops

The `for...of loop` is the most recent addition to the family of for loops in JavaScript.

It combines the strengths of its siblings, the `for loop` and the `for...in loop`, to loop over any type of data that is `iterable` (meaning it follows the [iterable protocol](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) which we'll look at in lesson 3). By default, this includes the data types String, Array, Map, and Set‚Äînotably absent from this list is the `Object` data type (i.e. `{}`). Objects are not iterable, by default.

Before we look at the for...of loop, let‚Äôs first take a quick look at the other for loops to see where they have weaknesses.

#### The for loop

The for loop is obviously the most common type of loop there is, so this should be a quick refresher.

{% highlight js %}
const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

for (let i = 0; i < digits.length; i++) {
  console.log(digits[i]);
}
{% endhighlight %}


Console will print:
{% highlight html %}
0
1
2
3
4
5
6
7
8
9
{% endhighlight %}

Really the biggest downside of a for loop is having to keep track of `the counter` and `exit condition`.

In this example, we‚Äôre using the variable ` i ` as a counter to keep track of the loop and to access values in the array. We‚Äôre also using `digits.length` to determine the exit condition for the loop. If you just glance at this code, it can sometimes be confusing exactly what‚Äôs happening; especially for beginners.

While for loops certainly have an advantage when looping through arrays, some data is not structured like an array, so a for loop isn‚Äôt always an option.

#### The for...in loop

The `for...in loop` improves upon the weaknesses of the for loop by eliminating the `counting logic` and `exit condition`.

{% highlight js %}
const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

for (const index in digits) {
  console.log(digits[index]);
}
{% endhighlight %}

Console will print the same:
{% highlight html %}
0
1
2
3
4
5
6
7
8
9
{% endhighlight %}

But, you still have to deal with the issue of using an `index` to access the values of the array, and that stinks; it almost makes it more confusing than before.

Also, the for...in loop can get you into big trouble when you need to add an extra method to an array (or another object). Because for...in loops loop over all enumerable properties, this means if you add any additional properties to the array's prototype, then those properties will also appear in the loop.

{% highlight js %}
Array.prototype.decimalfy = function() {
  for (let i = 0; i < this.length; i++) {
    this[i] = this[i].toFixed(2);
  }
};

const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

for (const index in digits) {
  console.log(digits[index]);
}
{% endhighlight %}


Console will print:
{% highlight html %}
0
1
2
3
4
5
6
7
8
9
function() {
‚ÄÉfor (let i = 0; i < this.length; i++) {
‚ÄÉ‚ÄÉthis[i] = this[i].toFixed(2);
‚ÄÉ}
}
{% endhighlight %}

Gross! This is why for...in loops are discouraged when looping over arrays.

üí• The `forEach loop` is another type of for loop in JavaScript. However, `forEach()` is actually an array method, so it can only be used exclusively with arrays. There is also no way to stop or break a `forEach loop`. If you need that type of behavior in your loop, you‚Äôll have to use a basic for loop.

#### For...of Loop

The `for...of loop` is used to loop over any type of data that is iterable.

You write a `for...of loop` almost exactly like you would write a `for...in loop`, except you swap out `in` with `of` and you can drop the `index`.

{% highlight js %}
const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

for (const digit of digits) {
  console.log(digit);
}
{% endhighlight %}

Console will print the same:
{% highlight html %}
0
1
2
3
4
5
6
7
8
9
{% endhighlight %}

This makes the `for...of loop` the most concise version of all the for loops.

üí• It‚Äôs good practice to use plural names for objects that are collections of values. That way, when you loop over the collection, you can use the singular version of the name when referencing individual values in the collection. For example, `for (const button of buttons) {...}.`

But wait, there‚Äôs more! The for...of loop also has some additional benefits that fix the weaknesses of the for and for...in loops.

You can stop or break a for...of loop at anytime.

{% highlight js %}
const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

for (const digit of digits) {
  if (digit % 2 === 0) {
    continue;
  }
  console.log(digit);
}
{% endhighlight %}

Console will print:
{% highlight html %}
1
3
5
7
9
{% endhighlight %}

And you don‚Äôt have to worry about adding new properties to objects. The for...of loop will only loop over the values in the object.

{% highlight js %}
Array.prototype.decimalfy = function() {
  for (i = 0; i < this.length; i++) {
    this[i] = this[i].toFixed(2);
  }
};

const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];

for (const digit of digits) {
  console.log(digit);
}
{% endhighlight %}

Console will print:
{% highlight html %}
0
1
2
3
4
5
6
7
8
9
{% endhighlight %}

#### Quick example

Directions:

Write a for...of loop that:

  - loops through each day in the days array
  - capitalizes the first letter of the day
  - and prints the day out to the console

Your code should log the following to the console:

{% highlight html %}
Sunday
Monday
Tuesday
Wednesday
Thursday
Friday
Saturday
{% endhighlight %}

SolutionL:

{% highlight js %}
const days = ['sunday', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday'];

for (const day of days) {
    console.log(day.charAt(0).toUpperCase() + day.slice(1));
}
{% endhighlight %}

## Spread... Operator

The spread operator, written with three consecutive dots ( `...` ), is new in ES6 and gives you the ability to expand, or spread, [iterable objects](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Iterators) into multiple elements.

Let‚Äôs take a look at a few examples to see how it works.

{% highlight js %}
const books = ["Don Quixote", "The Hobbit", "Alice in Wonderland", "Tale of Two Cities"];
console.log(...books);
{% endhighlight %}

Console will print: `Don Quixote The Hobbit Alice in Wonderland Tale of Two Cities`

{% highlight js %}
const primes = new Set([2, 3, 5, 7, 11, 13, 17, 19, 23, 29]);
console.log(...primes);
{% endhighlight %}

Console will print: ` 2 3 5 7 11 13 17 19 23 29 `

If you look at the output from the examples, notice that both the array and set have been expanded into their individual elements. So how is this useful?

üí• Sets are a new built-in object in ES6 that we‚Äôll cover in more detail in a future lesson.

#### Combining arrays with concat

One example of when the spread operator can be useful is when combining arrays.

If you‚Äôve ever needed to combine multiple arrays, prior to the spread operator, you were forced to use the Array‚Äôs `concat()` method.

{% highlight js %}
const fruits = ["apples", "bananas", "pears"];
const vegetables = ["corn", "potatoes", "carrots"];
const produce = fruits.concat(vegetables);
console.log(produce);
{% endhighlight %}

Console will print: `["apples", "bananas", "pears", "corn", "potatoes", "carrots"]`

This isn‚Äôt terrible, but wouldn‚Äôt it be nice if there was a shorthand way to write this code?

For example, something like‚Ä¶

‚ö†Ô∏è Upcoming const Warning ‚ö†Ô∏è

If you're following along by copy/pasting the code, then you've already declared the produce variable with the const keyword. The following code will try to redeclare and reassign the variable, so depending on how you're running the code, it might throw an error.

Remember that variables declared with const cannot be redeclared or reassigned in the same scope.

{% highlight js %}
const produce = [fruits, vegetables];
console.log(produce);
{% endhighlight %}

Console will print: `[Array[3], Array[3]]`

Unfortunately, that doesn‚Äôt work.

Instead of combining both arrays, this code actually adds the fruits array at the first index and the vegetables array at the second index of the produce array.

How about trying the spread operator?

{% highlight js %}
const fruits = ["apples", "bananas", "pears"];
const vegetables = ["corn", "potatoes", "carrots"];

const produce = [...fruits, ...vegetables];

console.log(...produce);
{% endhighlight %}

Console will finally print: `apples bananas pears corn potatoes carrots`

## ...Rest Parameter

The rest parameter, also written with three consecutive dots ( `...` ), allows you to represent an indefinite number of elements as an array. This can be helpful in a couple of different situations.

One situation is when assigning the values of an array to variables. For example,

{% highlight js %}
const order = [20.17, 18.67, 1.50, "cheese", "eggs", "milk", "bread"];
const [total, subtotal, tax, ...items] = order;
console.log(total, subtotal, tax, items);
{% endhighlight %}

Console will print: `20.17 18.67 1.5 ["cheese", "eggs", "milk", "bread"]`

This code takes the values of the `order` array and assigns them to individual variables using destructuring (as you saw in the Destructuring section earlier in this lesson). `total`, `subtotal`, and `tax` are assigned the first three values in the array, however, `items` is where you want to pay the most attention.

By using the rest parameter, `items` is assigned the rest of the values in the array (as an array).

#### Variadic functions

Another use case for the rest parameter is when you‚Äôre working with variadic functions. Variadic functions are functions that take an indefinite number of arguments.

For example, let‚Äôs say we have a function called `sum()` which calculates the sum of an indefinite amount of numbers. How might the `sum()` function be called during execution?

{% highlight js %}
sum(1, 2);
sum(10, 36, 7, 84, 90, 110);
sum(-23, 3000, 575000);
{% endhighlight %}

There‚Äôs literally an endless number of ways the `sum()` function could be called. Regardless of the amount of numbers passed to the function, it should always return the total sum of the numbers.

#### Using the arguments object

In previous versions of JavaScript, this type of function would be handled using the [arguments object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments). The `arguments object` is an array-like object that is available as a local variable inside all functions. It contains a value for each argument being passed to the function starting at 0 for the first argument, 1 for the second argument, and so on.

If we look at the implementation of our `sum()` function, then you‚Äôll see how the arguments object could be used to handle the variable amount of numbers being passed to it.

{% highlight js %}
function sum() {
  let total = 0;  
  for(const argument of arguments) {
    total += argument;
  }
  return total;
}
{% endhighlight %}

Now this works fine, but it does have its issues:

  1. If you look at the definition for the sum() function, it doesn‚Äôt have any parameters.
    - This is misleading because we know the sum() function can handle an indefinite amount of arguments.
  2. It can be hard to understand.
    - If you‚Äôve never used the arguments object before, then you would most likely look at this code and wonder where the arguments object is even coming from. Did it appear out of thin air? It certainly looks that way.

#### Using the rest parameter

Fortunately, with the addition of the rest parameter, you can rewrite the `sum()` function to read more clearly.

{% highlight js %}
function sum(...nums) {
  let total = 0;  
  for(const num of nums) {
    total += num;
  }
  return total;
}
{% endhighlight %}

This version of the `sum()` function is both `more concise` and is `easier to read`. Also, notice the `for...in` loop has been replaced with the new `for...of` loop.

#### Quick example

Directions:

Use the rest parameter to create an `average()` function that calculates the average of an unlimited amount of numbers.

{% highlight html %}
average(2, 6) should return 4
average(2, 3, 3, 5, 7, 10) should return 5
average(7, 1432, 12, 13, 100) should return 312.8
average() should return 0
{% endhighlight %}


Solution:

{% highlight js %}
function average(...nums) {
    let x = 0
    for (const num of nums) {
        x += num;
        y = nums.length;
    }
    return x/y;
}

console.log(average(2, 6));
console.log(average(2, 3, 3, 5, 7, 10));
console.log(average(7, 1432, 12, 13, 100));
console.log(average());
{% highlight js %}
