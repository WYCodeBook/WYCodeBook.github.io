---
layout: post
title: "Syntax"
date: "2018-08-26 12:55:36 -0700"
categories: JavaScript
description: Basic Syntax
---

üîç [let and const](#let-and-const) üîç [Template Literals](#template-literals) üîç [Destructuring](#destructuring) üîç [Object Literal Shorthand](#object-literal-shorthand)

---

#### Hoisting

Hoisting is a result of how JavaScript is interpreted by your browser. Essentially, before any JavaScript code is executed, all variables are "hoisted", which means they're raised to the top of the function scope. So at run-time, the `getClothing()` function actually looks more like this‚Ä¶

Without Hoisting...

{% highlight js %}
function getClothing(isCold) {
  if (isCold) {
    var freezing = 'Grab a jacket!';
  } else {
    var hot = 'It‚Äôs a shorts kind of day.';
    console.log(freezing);
  }
}
{% endhighlight %}

With Hoisting...

{% highlight js %}
function getClothing(isCold) {
  var freezing, hot;
  if (isCold) {
    freezing = 'Grab a jacket!';
  } else {
    hot = 'It‚Äôs a shorts kind of day.';
    console.log(freezing);
  }
}
{% endhighlight %}

## let and const

Variables declared with `let` and `const` eliminate this specific issue of hoisting because they‚Äôre scoped to the block, not to the function. Previously, when you used `var`, variables were either scoped globally or locally to an entire function scope.

If a variable is declared using `let` or `const` inside a block of code (denoted by curly braces `{ }`), then the variable is stuck in what is known as the temporal dead zone until the variable‚Äôs declaration is processed. This behavior prevents variables from being accessed only until after they‚Äôve been declared.

{% highlight js %}
function getClothing(isCold) {
  if (isCold) {
    let freezing = 'Grab a jacket!';
  } else {
    let hot = 'It‚Äôs a shorts kind of day.';
    console.log(freezing);
  }
}
{% endhighlight %}

#### üëì Read more about Links at:

  - [3wschools - let](https://www.w3schools.com/js/js_let.asp)

  - [3wschools - const](https://www.w3schools.com/js/js_const.asp)


## Rules for using let and const

`let` and `const` also have some other interesting properties.

  - Variables declared with `let` can be reassigned, but can‚Äôt be redeclared in the same scope.

  - Variables declared with `const` must be assigned an initial value, but can‚Äôt be redeclared in the same scope, and can‚Äôt be reassigned.

## Use cases

The big question is when should you use `let` and `const`? The general rule of thumb is as follows:

  - use `let` when you plan to reassign new values to a variable

  - use `const` when you don‚Äôt plan on reassigning new values to a variable

Since `const` is the strictest way to declare a variable, we suggest that you always declare variables with `const` because it'll make your code easier to reason about since you know the identifiers won't change throughout the lifetime of your program. If you find that you need to update a variable or change it, then go back and switch it from `const` to `let`.

## What about var?

Is there any reason to use `var` anymore? Not really.

There are some arguments that can be made for using `var` in situations where you want to globally define variables, but this is often considered bad practice and should be avoided. From now on, we suggest ditching `var` in place of using `let` and `const`.

## Prior to ES6...

the old way to concatenate strings together was by using the string concatenation operator ( `+` ).

{% highlight js %}
const student = {
  name: 'Richard Kalehoff',
  guardian: 'Mr. Kalehoff'
};

const teacher = {
  name: 'Mrs. Wilson',
  room: 'N231'
}

let message = student.name + ' please see ' + teacher.name + ' in ' + teacher.room + ' to pick up your report card.';
{% endhighlight %}

Console will print: `Richard Kalehoff please see Mrs. Wilson in N231 to pick up your report card.`

This works alright, but it gets more complicated when you need to build multi-line strings.

{% highlight js %}
let note = teacher.name + ',\n\n' +
  'Please excuse ' + student.name + '.\n' +
  'He is recovering from the flu.\n\n' +
  'Thank you,\n' +
  student.guardian;
{% endhighlight %}

Console will print:

{% highlight html %}
Mrs. Wilson,

Please excuse Richard Kalehoff.
He is recovering from the flu.

Thank you,
Mr. Kalehoff
{% endhighlight %}

However, that‚Äôs changed with the introduction of template literals (previously referred to as "template strings" in development releases of ES6).

üí• As an alternative to using the string concatenation operator ( `+` ), you can use the String's `concat()` method, but both options are rather clunky for simulating true [string interpolation](https://en.wikipedia.org/wiki/String_interpolation).

## Template Literals

Template literals are essentially string literals that include embedded expressions.

Denoted with backticks ( ) instead of single quotes ( `''` ) or double quotes ( `""` ), template literals can contain placeholders which are represented using `${expression}`. This makes it much easier to build strings.

Here's the previous examples using template literals.

{% highlight js %}
let message = `${student.name} please see ${teacher.name} in ${teacher.room} to pick up your report card.`;
{% endhighlight %}

Console will print: `Richard Kalehoff please see Mrs. Wilson in N231 to pick up your report card.`

By using template literals, you can drop the quotes along with the string concatenation operator. Also, you can reference the object's properties inside expressions.

Here‚Äôs where template literals really shine. In above, the quotes and string concatenation operator have been dropped, as well as the newline characters ( `\n` ). That's because template literals also preserve newlines as part of the string!

{% highlight js %}
let note = `${teacher.name}.

  Please excuse ${student.name}.
  He is recovering from the flu.

  Thank you,
  ${student.guardian}`;
{% endhighlight %}

Console will print the same:

{% highlight html %}
Mrs. Wilson,

Please excuse Richard Kalehoff.
He is recovering from the flu.

Thank you,
Mr. Kalehoff
{% endhighlight %}

üí• Embedded expressions inside template literals can do more than just reference variables. You can perform operations, call functions and use loops inside embedded expressions!

## Destructuring

In ES6, you can extract data from arrays and objects into distinct variables using `destructuring`.

This probably sounds like something you‚Äôve done before, for example, look at the two code snippets below that extract data using pre-ES6 techniques:

{% highlight js %}
const point = [10, 25, -34];

const x = point[0];
const y = point[1];
const z = point[2];

console.log(x, y, z);
{% endhighlight %}

Console will print: `10 25 -34`

The example above shows extracting values from an array.

{% highlight js %}
const gemstone = {
  type: 'quartz',
  color: 'rose',
  carat: 21.29
};

const type = gemstone.type;
const color = gemstone.color;
const carat = gemstone.carat;

console.log(type, color, carat);
{% endhighlight %}

Console will print: `quartz rose 21.29`

And this example shows extracting values from an object.

Both are pretty straightforward, however, neither of these examples are actually using destructuring.

#### So what exactly is destructuring?

Destructuring borrows inspiration from languages like [Perl](https://en.wikipedia.org/wiki/Perl) and [Python](https://en.wikipedia.org/wiki/Python_%28programming_language%29) by allowing you to specify the elements you want to extract from an array or object on the left side of an assignment. It sounds a little weird, but you can actually achieve the same result as before, but with much less code; and it's still easy to understand.

Let‚Äôs take a look at both examples rewritten using destructuring.

#### Destructuring values from an array

{% highlight js %}
const point = [10, 25, -34];

const [x, y, z] = point;

console.log(x, y, z);
{% endhighlight %}

Console will print the same: `10 25 -34`

In this example, the brackets `[ ]` represent the array being destructured and `x`, `y`, and `z` represent the variables where you want to store the values from the array. Notice how you don‚Äôt have to specify the indexes for where to extract the values from because the indexes are implied.

üí• You can also ignore values when destructuring arrays. For example, `const [x, , z] = point`; ignores the `y` coordinate and discards it.

#### Destructuring values from an object

{% highlight js %}
const gemstone = {
  type: 'quartz',
  color: 'rose',
  carat: 21.29
};

const {type, color, carat} = gemstone;

console.log(type, color, carat);
{% endhighlight %}

Console will print the same: `quartz rose 21.29`

In this example, the curly braces `{ }` represent the object being destructured and `type`, `color`, and `carat` represent the variables where you want to store the properties from the object. Notice how you don‚Äôt have to specify the property from where to extract the values. Because `gemstone` has a property named `type`, the value is automatically stored in the `type` variable. Similarly, `gemstone` has a `color` property, so the value of `color` automatically gets stored in the `color` variable. And it's the same with `carat`.

üí• You can also specify the values you want to select when destructuring an object. For example, `let {color} = gemstone`; will only select the color property from the gemstone object.

#### Quick example

Direction:

What do you expect to be returned from calling `getArea()`?

{% highlight js %}
const circle = {
  radius: 10,
  color: 'orange',
  getArea: function() {
    return Math.PI * this.radius * this.radius;
  },
  getCircumference: function() {
    return 2 * Math.PI * this.radius;
  }
};

let {radius, getArea, getCircumference} = circle;
{% endhighlight %}

Console will print: `NaN`

Calling `getArea()` will return `NaN`. When you destructure the object and store the `getArea()` method into the `getArea` variable, it no longer has access to `this` in the `circle` object which results in an area that is `NaN`.

Direction:

Use array destructuring to pull out the three colors from the array of things and store them into the variables one, two, and three.

{% highlight js %}
const things = ['red', 'basketball', 'paperclip', 'green', 'computer', 'earth', 'udacity',
'blue', 'dogs'];

const [one,,,two,,,,three] = things;

const colors = `List of Colors
1. ${one}
2. ${two}
3. ${three}`;

console.log(colors);
{% endhighlight %}

{% highlight html %}
List of Colors
1. red
2. green
3. blue
{% endhighlight %}

## Object Literal Shorthand

A recurring trend in ES6 is to remove unnecessary repetition in your code. By removing unnecessary repetition, your code becomes easier to read and more concise. This trend continues with the introduction of new shorthand ways for initializing objects and adding methods to objects.

Let‚Äôs see what those look like.

#### Object literal shorthand

You‚Äôve probably written code where an object is being initialized using the same property names as the variable names being assigned to them.

But just in case you haven‚Äôt, here‚Äôs an example.

{% highlight js %}
let type = 'quartz';
let color = 'rose';
let carat = 21.29;

const gemstone = {
  type: type,
  color: color,
  carat: carat
};

console.log(gemstone);
{% endhighlight %}

Console will print: `Object {type: "quartz", color: "rose", carat: 21.29}`

Do you see the repetition? Doesn't `type: type`, `color: color`, and `carat:carat` seem redundant?

The good news is that you can remove those duplicate variables names from object properties _if_ the properties have the same name as the variables being assigned to them.

Check it out!

{% highlight js %}
let type = 'quartz';
let color = 'rose';
let carat = 21.29;

const gemstone = { type, color, carat};

console.log(gemstone);
{% endhighlight %}

Speaking of shorthand, there‚Äôs also a shorthand way to add methods to objects.

To see how that looks, let‚Äôs start by adding a `calculateWorth()` method to our `gemstone` object. The `calculateWorth()` method will tell us how much our gemstone costs based on its `type`, `color`, and `carat`.

{% highlight js %}
let type = 'quartz';
let color = 'rose';
let carat = 21.29;

const gemstone = {
  type,
  color,
  carat,
  calculateWorth: function() {
    // will calculate worth of gemstone based on type, color, and carat
  }
};
{% endhighlight %}

In this example, an anonymous function is being assigned to the property `calculateWorth`, but is the function keyword really needed? In ES6, it‚Äôs not!

#### Shorthand method names

Since you only need to reference the gemstone‚Äôs `calculateWorth` property in order to call the function, having the function keyword is redundant, so it can be dropped.

{% highlight js %}
let gemstone = {
  type,
  color,
  carat,
  calculateWorth() { ... }
};
{% endhighlight %}
