---
layout: post
title: "The Shell"
date: "2018-09-07 22:33:08 -0700"
categories: [Shell, GitHub]
description: The Shell Workshop
---

## What is Shell?

Shell is a command-line interface for running programs on your computer. You type commands at a prompt and the Shell runs programs for you and shows you their output. Developers use it a lot because it's fast and flexible.

Shell is a vital tool for deployment and remote administration on Linux servers.

ðŸ’¥ When using Shell, you do have to remember several magic words and incantations!

JavaScript console is a command-line for your browser. And Shell is the command-line for your computer in general.

## The Terminal Program

The program we use to interact with the Shell is called a terminal program.

ðŸ’¥ A good UNIX heritage terminal program is already installed in Linux and Mac. Window do come with an old terminal program that based on MS-DOS command-line, not the UNIX heritage; therefore, Window will need to install a new terminal program.

ðŸ’¥ UNIX style Shell is the Professional Standard because most webs are running on Linux servers.

## The Bash-Shell

Bash-Shell is by far the most popular UNIX style Shell.

## Window Users --- Git Bash

Download Git Bash at https://git-scm.com/download/win

ðŸ’¥ There is a new Linux compatibility system in Windows 10, called Windows Subsystem for Linux (WSL). It's an experimental mini-Linux-OS that runs inside Windows, like a virtual machine. You can access your Windows files from inside it, but it's a little bit dangerous to share files between the Linux and Windows sides. In the future, WSL will probably become less experimental.

## Let's open the Terminal

Window Users: open Git Bash

MAC Users: open Terminal in the utility folder

![Terminal](/pic/terminal.PNG)

You can have multiple terminals open at once. Each one of them has its own instance of the Shell --- a separate process on your computer.

#### Shell Prompt

Shell Prompt normally is the first message on the terminal. It usually display information about the computer your logged into. It can be change.

## echo Command

The `echo` command is how we get the Shell to print messages. Just like `console.log` in JavaScript.

ðŸ’¥ The exclamation mark ` ! ` have a special meaning in Shell. If you enter `!!` or more into Shell, it will print with weird endless section of words.

ðŸ’¥ If you ever typing something into the Shell and it seems to be treating what you saying in a weird way, all you need to do is to put single quotes around it.

## The dollar symbol $

The dollar symbol ` $ ` in front of a word indicates that it is a Shell variable.

With that said, the command `echo $COLUMNS X $LINES` prints out the size of your terminal.

## Navigating Directories

To list the contents of a directory in a Shell, we can use the command ` LS `.

` LS ` is a super shortened version of the word list.

When you started a Shell, it usually starts out looking at your home directory. By entering ` LS ` itself, it will only print the contents of the current directory.

In order to list the another directory or a specific directory... you can enter ` LS ` with that folder/directory's name. For example, to list the contents of the downloads folder, you will enter ` LS Downloads`.

To change what directory the Shell is looking at... you will need to use ` cd ` (Change Directory). After you ` cd ` into a particular directory, ` LS ` by itself will show the contents of that directory.

ðŸ’¥ If you want to go back a directory, you can do that with directory name ` .. ` dot dot.

ðŸ’¥ The ` ; ` semicolon will allow you to write two commands on the same line.

## Current working directory

Ever get lost in the terminal and unsure which folder/directory you are working on? Use ` pwd ` (print working directory) to print whatever the directory the Shell is currently looking at.

ðŸ’¥ The UNIX system uses the forward slash to separate the names of directories.

ðŸ’¥ The string, composed of several directory names, that separate by slashes is called the Path.

ðŸ’¥ The single ` . ` dot represents the current directory.

ðŸ’¥ The tilda ` ~ ` represents my home directory. No matter which directory you are `cd` into, the `~` will show you the home directory.
