---
layout: post
title: "The Shell"
date: "2018-09-07 22:33:08 -0700"
categories: [Shell, GitHub]
description: The Shell Workshop
---

## What is Shell?

Shell is a command-line interface for running programs on your computer. You type commands at a prompt and the Shell runs programs for you and shows you their output. Developers use it a lot because it's fast and flexible.

Shell is a vital tool for deployment and remote administration on Linux servers.

ðŸ’¥ When using Shell, you do have to remember several magic words and incantations!

JavaScript console is a command-line for your browser. And Shell is the command-line for your computer in general.

## The Terminal Program

The program we use to interact with the Shell is called a terminal program.

ðŸ’¥ A good UNIX heritage terminal program is already installed in Linux and Mac. Window do come with an old terminal program that based on MS-DOS command-line, not the UNIX heritage; therefore, Window will need to install a new terminal program.

ðŸ’¥ UNIX style Shell is the Professional Standard because most webs are running on Linux servers.

## The Bash-Shell

Bash-Shell is by far the most popular UNIX style Shell.

## Window Users --- Git Bash

Download Git Bash at https://git-scm.com/download/win

ðŸ’¥ There is a new Linux compatibility system in Windows 10, called Windows Subsystem for Linux (WSL). It's an experimental mini-Linux-OS that runs inside Windows, like a virtual machine. You can access your Windows files from inside it, but it's a little bit dangerous to share files between the Linux and Windows sides. In the future, WSL will probably become less experimental.

## Let's open the Terminal

Window Users: open Git Bash

MAC Users: open Terminal in the utility folder

![Terminal](/pic/terminal.PNG)

You can have multiple terminals open at once. Each one of them has its own instance of the Shell --- a separate process on your computer.

#### Shell Prompt

Shell Prompt normally is the first message on the terminal. It usually display information about the computer your logged into. It can be change.

## echo Command

The `echo` command is how we get the Shell to print messages. Just like `console.log` in JavaScript.

ðŸ’¥ The exclamation mark `!` have a special meaning in Shell. If you enter `!!` or more into Shell, it will print with weird endless section of words.

ðŸ’¥ If you ever typing something into the Shell and it seems to be treating what you saying in a weird way, all you need to do is to put single quotes around it.

## The dollar symbol $

The dollar symbol `$` in front of a word indicates that it is a Shell variable.

With that said, the command `echo $COLUMNS X $LINES` prints out the size of your terminal.

## Navigating Directories

To list the contents of a directory in a Shell, we can use the command `LS`.

`LS` is a super shortened version of the word list.

When you started a Shell, it usually starts out looking at your home directory. By entering `LS` itself, it will only print the contents of the current directory.

In order to list the another directory or a specific directory... you can enter `LS` with that folder/directory's name. For example, to list the contents of the downloads folder, you will enter `LS Downloads`.

To change what directory the Shell is looking at... you will need to use `cd` (Change Directory). After you ` cd ` into a particular directory, `LS` by itself will show the contents of that directory.

ðŸ’¥ If you want to go back a directory, you can do that with directory name `..` dot dot.

ðŸ’¥ The `;` semicolon will allow you to write two commands on the same line.

## Current working directory

Ever get lost in the terminal and unsure which folder/directory you are working on? Use `pwd` (print working directory) to print whatever the directory the Shell is currently looking at.

ðŸ’¥ The UNIX system uses the forward slash to separate the names of directories.

ðŸ’¥ The string, composed of several directory names, that separate by slashes is called the Path.

ðŸ’¥ The single `.` dot represents the current directory.

ðŸ’¥ The tilda `~` represents my home directory. No matter which directory you are `cd` into, the `~` will show you the home directory.

## Parameters and options

In `LS -L`, the `-L` is an option to `LS`. You can also use it along with the name of a directory, such as `LS -L Documents/`. The `-L` will print out the longer more detailed listing of files.

Shell let's you match a filenames with a pattern. Let say you want to list all the PDF documents in your documents directory... you will enter `LS -L Documents/*.pdf`. The Shell will turn the `*` into a list of all of the files whose name match that pattern.

If you wanted to list all the files whose names start with the a specific word, such as `candy`. You will enter `LS -L candy*`.

## Organizing your files

`mkdir` stands for make directory

To create the books directory within the documents directory... `mkdir Documents/Books`

`mv` stands for move / to move the file

To move one individual file into the directory... `mv 'the start location' the end location`. Let say there is a book in the documents directory, a `.epub` file named `the fairy.epub`, and you want to move it into the Books directory we just created. You will enter `mv 'Documents/the fairy.epub' Documents/Books`

To move all files with the same pattern into the directory... Let say we want to move all book files (`.epub`) from Documents directory into the Books directory we just created. You will enter `mv Documents/*.epub Documents/Books`

## Downloading

`curl` (as in see URL or See a webpage) is the Shell command to download a file from the web.

`curl -L 'http://google.com'` with this dash big L `-L` option, means follow redirects and then we will see the source code to the actual google.com homepage.

CURL can be useful to download a file from the url. `curl -o google.html -L 'http://google.com'`  with dash little o `-o` option, followed by the file name we want to save it under, the Shell will create a file with the name and download the source codes into that file.

## Viewing files

`cat` can be use to read files and output the file contents. `cat` represents catenate or concatenate which means to run several things together. It will show all the contents within the file we asked Shell to run.

`less` which shows us smaller amount of the file at once. specifically, it will only show one screenful of the file at once. you will need to press space to scroll down or arrow keys to scroll through the file. Use `B` to go back and `/` to search within the file. When you are done in `less` you can press `Q` to quick.

## Removing things

`rm` is use to remove a file

ðŸ’¥ In GUI, your removed files usually will move into a trash-can or recycling-bin and you can always pull it back when you change your mind. But the `rm` command will remove the file right away with no take-back. In a case if you afraid you will remove something valuable, you can use option `-i` (as interactive) to prompt you to confirm when removing the file.

`rmdir` is use to remove a directory

## Searching and pipes

`grep` is use to search a text file for lines with particular contents... `grep` `the word you want to search` `the file name`. This will read through the file can prints out the line contain that specific word you want to search.

`grep` `the word you want to search` `the file name` `| less` so Shell can print out the lines contain that specific word you want to search one screenful at a time

You can also search a specific word from a webpage without saying the file in the computer. `curl` `-L 'https://google.com'` `| grep` `the word you want to search`

ðŸ’¥ The name "grep" stands for "global regular expression print". This means that grep can be used to see if the input it receives matches a specified pattern.

`wc` is use when we want to know how many times that specific word we want to search appeared in the file or webpage. With dash little l option `-l`, it will tell the `wc` to count the lines.

We can also do `grep` `-c` `the word you want to search` grep with dash little c to do a quick count of the word.

## Shell and environment variables

Shell Variables - the lines and columns variable we tried earlier with dollar signs `$` was an example of internal variables for the Shell itself

Environment Variables - shared with programs that you run from within the Shell.

ðŸ’¥ `LOGNAME` is an environment variable that contains the username of the account you're logged in as.

ðŸ’¥ `Path` variable is an important variable that will tell your system where your program files are, so when you type a command it can find the file to run it.

Adding a directory to your Path so that program in it can be found... to add the new directory to the end of your path, `path=$path:/new/dir/here`, but this only last until you close the Shell.


## Startup files

The Shell in every terminal you open will run commands in a file called `.bash_profile` (Mac and Window).

Everything you put into the `.bash_profile` will be saved and can be use and see again when opening a new Shell

ðŸ’¥ For Linux, `.bash_profile` only run in for some Shell sessions, specifically log-in Shells; non-log-in Shells run in a file called `.bashrc`. The way to go around this inconsistency is to put a statement into your `.bash_profile` that says if there is file called `.bahsrc`, run that file.

{$ highlight html $}
if [-f ~/.bashrc]; then
  source ~/.bashrc
fi
{$ endhighlight $}

## Controlling the shell prompt

Bash has four prompts that can be customized:

`PS1` is the primary prompt which is displayed before each command, thus it is the one most people customize.

`PS2` is the secondary prompt displayed when a command needs more input (e.g. a multi-line command).

`PS3` is not very commonly used. It is the prompt displayed for Bash's select built-in which displays interactive menus. Unlike the other prompts, it does not expand Bash escape sequences. Usually you would customize it in the script where the select is used rather than in your .bashrc.

`PS4` is also not commonly used. It is displayed when debugging bash scripts to indicate levels of indirection. The first character is repeated to indicate deeper levels.

All of the prompts are customized by setting the corresponding variable to the desired string (usually in `~/.bashrc`), for example

`export PS2='> '`

ðŸ‘“ [Bashrc Generator](http://bashrcgenerator.com/)

## Aliases

Aliases is the way to make long Shell command short.

Example:

`alias ll='ls -la'`

so every time when you type in with the short command the Shell will run the same as the long command.

ðŸ’¥ alias effect only last till the terminal is close! If you want the alias effect to last forever, you will need to manually put that into your .bash_profile

## More Resources

ðŸ‘“ [The Bash Academy](https://www.bash.academy/)

ðŸ‘“ [Bash Beginners Guide](http://www.tldp.org/LDP/Bash-Beginners-Guide/html/)

ðŸ‘“ [Bash Programming HOWTO](http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO.html)

ðŸ‘“ [Regexr â€” Learn Regular Expressions](https://regexr.com/)
