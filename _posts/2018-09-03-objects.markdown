---
layout: post
title: "Objects"
date: "2018-09-03 05:15:04 -0700"
categories: JavaScript
description: Basic Object + Object Literals
---

Objects are a data structure in JavaScript that lets you store data about a particular thing and helps you keep track of that data by using a "key".

Itâ€™s worth noting that while we can represent real-world objects as JavaScript objects, the analogy does not always hold. This is a good starting place for thinking about the structure and purpose of objects, but as you continue your career as a developer, youâ€™ll find that JavaScript objects can behave wildly different than real objects.

ðŸ’¥ `typeof` is an operator that returns the name of the data type that follows it:

{% highlight js %}
typeof "hello" // returns "string"
typeof true // returns "boolean"
typeof [1, 2, 3] // returns "object" (Arrays are a type of object)
typeof function hello() { } // returns "function"
{% endhighlight %}

##### Example

Using the umbrella example from the previous video, see if you can follow the example `open()` method and create the `close()` method. It's alright if you have trouble at first! We'll go into more detail later in this lesson.

{% highlight js %}
var umbrella = {
  color: "pink",
  isOpen: false,
  open: function() {
    if (umbrella.isOpen === true) {
      return "The umbrella is already opened!";
    } else {
      umbrella.isOpen = true;
      return "Julia opens the umbrella!";
    }
   }
};
{% endhighlight %}

Remember to put all of your object's properties and methods inside curly braces: `var myObject = { greeting: "hello", name: "Julia" };`. Also, remember that an object is just another data type. Just like how you would put a semicolon after a string variable declaration `var myString = "hello";`, don't forget to put a semi-colon at the end of your object's declaration.

{% highlight js %}
var umbrella = {
    color: "pink",
    isOpen: true,
    open: function() {
        if (umbrella.isOpen === true) {
            return "The umbrella is already opened!";
        } else {
            umbrella.isOpen = true;
            return "Julia opens the umbrella!";
        }
    },

    close: function() {
        if (umbrella.isOpen === false) {
            return "The umbrella is closed!";
        } else {
            umbrella.isOpen = false;
            return "Julia closes the umbrella!";
        }
    }
};

console.log(umbrella.isOpen)
{% endhighlight %}

Console will print: `true `

### Object-literal notation

{% highlight js %}
var sister = {
  name: "Sarah",
  age: 23,
  parents: [ "alice", "andy" ],
  siblings: ["julia"],
  favoriteColor: "purple",
  pets: true
};
{% endhighlight %}

The syntax you see above is called `object-literal notation`. There are some important things you need to remember when you're structuring an object literal:

  - The "key" (representing a `property` or `method` name) and its "value" are separated from each other by a `colon`

  - The `key: value` pairs are separated from each other by `commas`

  - The entire object is wrapped inside curly braces `{ }`.

And, kind of like how you can look up a word in the dictionary to find its definition, the `key` in a `key:value` pair allows you to look up a piece of information about an object. Here's are a couple examples of how you can retrieve information about my sister's parents using the object you created.

{% highlight js %}
// two equivalent ways to use the key to return its value
sister["parents"] // returns [ "alice", "andy" ]
sister.parents // also returns ["alice", "andy"]
{% endhighlight %}

Using `sister["parents"]` is called `bracket notation` (because of the brackets!) and using `sister.parents` is called `dot notation` (because of the dot!).

##### What about methods?

The sister object above contains a bunch of properties about my sister, but doesn't really say what my sister does. For instance, let's say my sister likes to paint. You might have a `paintPicture()` method that returns "Sarah paints a picture!" whenever you call it. The syntax for this is pretty much exactly the same as how you defined the properties of the object. The only difference is, the `value` in the `key:value` pair will be a function.

{% highlight js %}
var sister = {
  name: "Sarah",
  age: 23,
  parents: [ "alice", "andy" ],
  siblings: ["julia"],
  favoriteColor: "purple",
  pets: true,
  paintPicture: function() { return "Sarah paints!"; }
};

sister.paintPicture();
{% endhighlight %}

Console will print:  `"Sarah paints!"`

and you can access the name of my sister by accessing the name property:

`sister.name`

Console will print: ` "Sarah"`

### Summary of Objects

Objects are one of the most important data structures in JavaScript. Get ready to see them everywhere!

They have properties (information about the object) and methods (functions or capabilities the object has). Objects are an incredibly powerful data type and you will see them all over the place when working with JavaScript, or any other object-oriented programming language.

##### Object literals, methods, and properties

You can define objects using object-literal notation:

{% highlight js %}
var myObj = {
  color: "orange",
  shape: "sphere",
  type: "food",
  eat: function() { return "yummy" }
};

myObj.eat(); // method
myObj.color; // property
{% endhighlight %}

##### Naming conventions

Feel free to use upper and lowercase numbers and letters, but don't start your property name with a number. You don't need to wrap the string in quotes! If it's a multi-word property, use camel case. Don't use hyphens in your property names

{% highlight js %}
var richard = {
  "1stSon": true;
  "loves-snow": true;
};

richard.1stSon // error
richard.loves-snow // error
{% endhighlight %}

### Example

Create a breakfast object to represent the following menu item:

The Lumberjack - $9.95

eggs, sausage, toast, hashbrowns, pancakes

The object should contain properties for the name, price, and ingredients.

{% highlight js %}
var breakfast = {
    name : "The Lumberjack",
    price : "$9.95",
    ingredients: ["eggs", "sausage", "toast", "hashbrowns", "pancakes"]
};

console.log (breakfast["name"]);
console.log (breakfast.ingredients);
{% endhighlight %}

Console will print:

{% highlight js %}
The Lumberjack
[ 'eggs', 'sausage', 'toast', 'hashbrowns', 'pancakes' ]
{% endhighlight %}

### Example

Using the given object:

{% highlight js %}
var savingsAccount = {
  balance: 1000,
  interestRatePercent: 1,
  deposit: function addMoney(amount) {
    if (amount > 0) {
      savingsAccount.balance += amount;
    }
  },
  withdraw: function removeMoney(amount) {
    var verifyBalance = savingsAccount.balance - amount;
    if (amount > 0 && verifyBalance >= 0) {
      savingsAccount.balance -= amount;
    }
  }
};
{% endhighlight %}

add a `printAccountSummary()` method that returns the following account message:

Welcome!

Your balance is currently $1000 and your interest rate is 1%.


{% highlight js %}
var savingsAccount = {
    balance: 1000,
    interestRatePercent: 1,
    deposit: function addMoney(amount) {
        if (amount > 0) {
            savingsAccount.balance += amount;
        }
    },
    withdraw: function removeMoney(amount) {
        var verifyBalance = savingsAccount.balance - amount;
        if (amount > 0 && verifyBalance >= 0) {
            savingsAccount.balance -= amount;
        }
    },
    printAccountSummary: function() {
        return "Welcome!\nYour balance is currently $" +
        savingsAccount.balance + " and your interest rate is " +
        savingsAccount.interestRatePercent + "%.";

    }
};

console.log(savingsAccount.printAccountSummary());
{% endhighlight %}

Console will print:

Welcome!

Your balance is currently $1000 and your interest rate is 1%.

### Example

Create an object called `facebookProfile`. The object should have 3 properties:

  - your `name`

  - the number of `friends` you have, and

  - an array of `messages` you've posted (as strings)

The object should also have 4 methods:

  - `postMessage(message)` - adds a new message string to the array

  - `deleteMessage(index)` - removes the message corresponding to the index provided

  - `addFriend()` - increases the friend count by 1

  - `removeFriend()` - decreases the friend count by 1

{% highlight js %}
var facebookProfile = {
    name: "Wen",
    friends: 100,
    messages: ["Summer is here!", "We need more ice creams~", "And watermelons too!"],
    addFriend: function(){
        return facebookProfile.friends += 1;
    },
    removeFriend: function(){
        return facebookProfile.friends -= 1;
    },
    postMessage: function(message){
        return facebookProfile.messages.push(message);
    },
    deleteMessage: function(index){
        return facebookProfile.messages.splice(index, 1);
    }
};


console.log(facebookProfile.postMessage);
{% endhighlight %}

Console will print: `[Function: postMessage]`

### Example

Here is an array of donut objects.

{% highlight js %}
var donuts = [
  { type: "Jelly", cost: 1.22 },
  { type: "Chocolate", cost: 2.45 },
  { type: "Cider", cost: 1.59 },
  { type: "Boston Cream", cost: 5.99 }
];
{% endhighlight %}

Use the `forEach()` method to loop over the array and print out the following donut summaries using `console.log`.

Jelly donuts cost $1.22 each

Chocolate donuts cost $2.45 each

Cider donuts cost $1.59 each

Boston Cream donuts cost $5.99 each

{% highlight js %}
var donuts = [
    { type: "Jelly", cost: 1.22 },
    { type: "Chocolate", cost: 2.45 },
    { type: "Cider", cost: 1.59 },
    { type: "Boston Cream", cost: 5.99 }
];

donuts.forEach(function(donut){
    donutSummaries="";
    donutSummaries += donut.type + " donuts cost $" + donut.cost + " each";
    console.log(donutSummaries);
});

{% endhighlight %}

Console will print:

{% highlight js %}
Jelly donuts cost $1.22 each
Chocolate donuts cost $2.45 each
Cider donuts cost $1.59 each
Boston Cream donuts cost $5.99 each
{% endhighlight %}
