---
layout: post
title: "Arrays"
date: "2018-09-03 03:42:29 -0700"
categories: Notes
tags: JavaScript
description: Basic Arrays + Array Index + Array Loops
---

An Array is a data structure that you can use to store multiple values and arrays are also organized.

`var arraysName = [..., ..., ...];`

An array is useful because it stores multiple values into a single, organized data structure. You can define a new array by listing values separated with commas between square brackets `[]`.

{% highlight js %}
  // creates a `donuts` array with three strings
  var donuts = ["glazed", "powdered", "jelly"];
{% endhighlight %}

But strings arenâ€™t the only type of data you can store in an array. You can also store numbers, booleansâ€¦ and really anything!

{% highlight js %}
// creates a `mixedData` array with mixed data types
var mixedData = ["abcd", 1, true, undefined, null, "all the things"];
{% endhighlight %}

You can even store an array in an array to create a nested array!

{% highlight js %}
// creates a `arraysInArrays` array with three arrays
var arraysInArrays = [[1, 2, 3], ["Julia", "James"], [true, false, true, false]];
{% endhighlight %}

Nested arrays can be particularly hard to read, so it's common to write them on one line, using a newline after each comma:

{% highlight js %}
var arraysInArrays = [
  [1, 2, 3],
  ["Julia", "James"],
  [true, false, true, false]
];
{% endhighlight %}

### Array Element

Element references to the individual piece of data within the array.

### Array Index

Index references the location or position of an element in an array.

ðŸ’¥ Remember that elements in an array are indexed starting at the position `0`.

To access an element in an array, use the name of the array immediately followed by square brackets containing the index of the value you want to access.

{% highlight js %}
var donuts = ["glazed", "powdered", "sprinkled"];
console.log(donuts[0]); // "glazed" is the first element in the `donuts` array
{% endhighlight %}

Console will print: "glazed"

One thing to be aware of is if you try to access an element at an index that does not exist, a value of undefined will be returned back.

{% highlight js %}
console.log(donuts[3]); // the fourth element in `donuts` array does not exist!
{% endhighlight %}

Console will print: undefined

If you want to change the value of an element in array, you can do so by setting it equal to a new value.

{% highlight js %}
donuts[1] = "glazed cruller"; // changes the second element in the `donuts` array to "glazed cruller"
console.log(donuts[1]);
{% endhighlight %}

Console will print: "glazed cruller"

##### Examples

Create an array called crew to organize the Serenityâ€™s crew and set it equal to the variables below . You don't need to type out the actual strings, just use the provided variables.

var captain = "Mal";
var second = "Zoe";
var pilot = "Wash";
var companion = "Inara";
var mercenary = "Jayne";
var mechanic = "Kaylee";

Then, print the crew array to the console.

{% highlight js %}
var captain = "Mal";
var second = "Zoe";
var pilot = "Wash";
var companion = "Inara";
var mercenary = "Jayne";
var mechanic = "Kaylee";

var crew = [captain, second, pilot, companion, mercenary, mechanic];
console.log(crew);
{% endhighlight %}

Starting with this array of prices, change the prices of the 1st, 3rd, and 7th elements in the array.

var prices = [1.23, 48.11, 90.11, 8.50, 9.99, 1.00, 1.10, 67.00];

TIP: The 1st element of any array has an index of 0.

Afterwards, print out the prices array to the console.

{% highlight js %}
var prices = [1.23, 48.11, 90.11, 8.50, 9.99, 1.00, 1.10, 67.00];

prices[1] = 11.48;
prices[3] = 5.80;
prices[7] = 76;

console.log(prices);
{% endhighlight %}

### Array Properties and Methods

ðŸ‘“ [Built In Array Methods](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array)

### Array.length

You can find the length of an array by using its `length` property.

{% highlight js %}
var donuts = ["glazed", "powdered", "sprinkled"];
console.log(donuts.length);
{% endhighlight %}

Console will print: 3

To access the `length` property, type the name of the array, followed by a period . (youâ€™ll also use the period to access other properties and methods), and the word `length`. The `length` property will then return the number of elements in the array.

ðŸ’¥ Strings have a `length` property too! You can use it to get the length of any string. For example, `"supercalifragilisticexpialidocious".length` returns `34`.

### Push & Pop

The two most common methods for modifying an array are `push()` and `pop()`.

You can use the `push()` method to add elements to the end of an array.

For example, imagine the following spread of donuts.

You can represent the spread of donuts using an array.

{% highlight js %}
var donuts = ["glazed", "chocolate frosted", "Boston creme", "glazed cruller", "cinnamon sugar", "sprinkled"];
{% endhighlight %}

Then, you can push donuts onto the end of the array using the `push()` method.

{% highlight js %}
donuts.push("powdered"); // pushes "powdered" onto the end of the `donuts` array
{% endhighlight %}

Console will print: `7`

donuts array: `["glazed", "chocolate frosted", "Boston creme", "glazed cruller", "cinnamon sugar", "sprinkled", "powdered"]`

ðŸ’¥ With the `push()` method you need to pass the value of the element you want to add to the end of the array. Also, the `push()` method returns the length of the array after an element has been added.

{% highlight js %}
var donuts = ["glazed", "chocolate frosted", "Boston creme", "glazed cruller", "cinnamon sugar", "sprinkled"];
donuts.push("powdered"); // the `push()` method returns 7 because the `donuts` array now has 7 elements
{% endhighlight %}

Console will print: `7`

Alternatively, you can use the `pop()` method to remove elements from the end of an array.

{% highlight js %}
var donuts = ["glazed", "chocolate frosted", "Boston creme", "glazed cruller", "cinnamon sugar", "sprinkled", "powdered"];

donuts.pop(); // pops "powdered" off the end of the `donuts` array
donuts.pop(); // pops "sprinkled" off the end of the `donuts` array
donuts.pop(); // pops "cinnamon sugar" off the end of the `donuts` array
{% endhighlight %}

Console will print: `"cinnamon sugar"`

donuts array: `["glazed", "chocolate frosted", "Boston creme", "glazed cruller"]`

ðŸ’¥ With the `pop()` method you donâ€™t need to pass a value; instead, `pop()` will always remove the last element from the end of the array. Also, `pop()` returns the element that has been removed in case you need to use it.

{% highlight js %}
var donuts = ["glazed", "chocolate frosted", "Boston creme", "glazed cruller", "cinnamon sugar", "sprinkled", "powdered"];
donuts.pop(); // the `pop()` method returns "powdered" because "powdered" was the last element on the end of `donuts` array
{% endhighlight %}

Console will print: `"powdered"`

### Splice

`splice()` is another handy method that allows you to add and remove elements from anywhere within an array.

While `push()` and `pop()` limit you to adding and removing elements from the end of an array, `splice()` lets you specify the index location to add new elements, as well as the number of elements you'd like to delete (if any).

{% highlight js %}
var donuts = ["glazed", "chocolate frosted", "Boston creme", "glazed cruller"];
donuts.splice(1, 1, "chocolate cruller", "creme de leche"); // removes "chocolate frosted" at index 1 and adds "chocolate cruller" and "creme de leche" starting at index 1
{% endhighlight %}

Console will print: `["chocolate frosted"]`

donuts array: `["glazed", "chocolate cruller", "creme de leche", "Boston creme", "glazed cruller"]`

The first argument represents the starting index from where you want to change the array, the second argument represents the numbers of elements you want to remove, and the remaining arguments represent the elements you want to add.

ðŸ’¥ `splice()` is an incredibly powerful method that allows you to manipulate your arrays in a variety of ways. Any combination of adding or removing elements from an array can all be done in one simple line of code.

ðŸ‘“ [Array.splice()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice)

##### Example

{% highlight js %}
var months = ['Jan', 'March', 'April', 'June'];
months.splice(1, 0, 'Feb');
// inserts at 1st index position
console.log(months);
// expected output: Array ['Jan', 'Feb', 'March', 'April', 'June']

months.splice(4, 1, 'May');
// replaces 1 element at 4th index
console.log(months);
// expected output: Array ['Jan', 'Feb', 'March', 'April', 'May']
{% endhighlight %}

Console will print:

Array: `["Jan", "Feb", "March", "April", "June"]`

Array: `["Jan", "Feb", "March", "April", "May"]`

##### Example

James was creating an array with the colors of the rainbow, and he forgot some colors. The standard rainbow colors are usually listed in this order:

var rainbow = ["Red", "Orange", "Yellow", "Green", "Blue", "Purple"];

but James had this:

var rainbow = ["Red", "Orange", "Blackberry", "Blue"];

Using only the `splice()` method, insert the missing colors into the array, and remove the color `"Blackberry"` by following these steps:

Remove `"Blackberry"`

Add `"Yellow"` and `"Green"`

Add `"Purple"`

{% highlight js %}
var rainbow = ["Red", "Orange", "Blackberry", "Blue"];

rainbow.splice(2,1,"Yellow","Green");
rainbow.splice(5,0, "Purple");

console.log(rainbow)
{% endhighlight %}

##### Example

In the Harry Potter novels, children attending the Hogwarts School of Witchcraft and Wizardry belong to one of four houses: Gryffindor, Hufflepuff, Ravenclaw, or Slytherin. Each year, the houses assemble a Quidditch team of seven players to compete for the coveted Quidditch Cup.

Consider the following array.

var team = ["Oliver Wood", "Angelina Johnson", "Katie Bell", "Alicia Spinnet", "George Weasley", "Fred Weasley", "Harry Potter"];

Create a function called `hasEnoughPlayers()` that takes the `team` array as an argument and returns `true` or `false` depending on if the array has `at least seven players`.

{% highlight js %}
var team = ["Oliver Wood", "Angelina Johnson", "Katie Bell", "Alicia Spinnet", "George Weasley", "Fred Weasley", "Harry Potter"];
console.log(hasEnoughPlayers(team));

function hasEnoughPlayers (players) {
    if (players.length >= 7) {
    return true;
    }
    else {
    return false;
    }
}
{% endhighlight %}

Console will print: `true `

##### Example

You have a crew array to represent Malâ€™s crew from the hit show Firefly.

var captain = "Mal";

var second = "Zoe";

var pilot = "Wash";

var companion = "Inara";

var mercenary = "Jayne";

var mechanic = "Kaylee";

var crew = [captain, second, pilot, companion, mercenary, mechanic];

Later Mal takes on three new crew members named `"Simon"`, `"River"`, and `"Book"`. Use the `push()` method to add the three new crew members to the crew array.

var doctor = "Simon";

var sister = "River";

var shepherd = "Book";

{% highlight js %}
var captain = "Mal";
var second = "Zoe";
var pilot = "Wash";
var companion = "Inara";
var mercenary = "Jayne";
var mechanic = "Kaylee";

var crew = [captain, second, pilot, companion, mercenary, mechanic];

var doctor = "Simon";
var sister = "River";
var shepherd = "Book";

crew.push("Simon","River","Book");

console.log(crew);
{% endhighlight %}

Console will print:` [ 'Mal','Zoe','Wash','Inara','Jayne','Kaylee','Simon','River','Book' ]`

### Array Loops

Once the data is in the array, you want to be able to efficiently access and manipulate each element in the array without writing repetitive code for each element.

For instance, if this was our original donuts array:

`var donuts = ["jelly donut", "chocolate donut", "glazed donut"];
`

and we decided to make all the same donut types, but only sell them as donut holes instead, we could write the following code:

{% highlight js %}
donuts[0] += " hole";
donuts[1] += " hole";
donuts[2] += " hole";
{% endhighlight %}

donuts array: `["jelly donut hole", "chocolate donut hole", "glazed donut hole"]`

But remember, you have another powerful tool at your disposal, loops!

To loop through an array, you can use a variable to represent the index in the array, and then loop over that index to perform whatever manipulations your heart desires.

{% highlight js %}
var donuts = ["jelly donut", "chocolate donut", "glazed donut"];

// the variable `i` is used to step through each element in the array
for (var i = 0; i < donuts.length; i++) {
    donuts[i] += " hole";
    donuts[i] = donuts[i].toUpperCase();
}
{% endhighlight %}

donuts array: `["JELLY DONUT HOLE", "CHOCOLATE DONUT HOLE", "GLAZED DONUT HOLE"]`

In this example, the variable `i` is being used to represent the index of the array. As `i` is incremented, you are stepping over each element in the array starting from `0` until `donuts.length - 1` (`donuts.length` is out of bounds).

### The forEach Loop

Arrays have a set of special methods to help you iterate over and perform operations on collections of data. You can view the MDN Documentation list of Array methods [here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array), but a couple big ones to know are the `forEach()` and `map()` methods.

The `forEach()` method gives you an alternative way to iterate over an array, and manipulate each element in the array with an inline function expression.

{% highlight js %}
var donuts = ["jelly donut", "chocolate donut", "glazed donut"];

donuts.forEach(function(donut) {
  donut += " hole";
  donut = donut.toUpperCase();
  console.log(donut);
});
{% endhighlight %}

Console will print:

`JELLY DONUT HOLE

CHOCOLATE DONUT HOLE

GLAZED DONUT HOLE`

Notice that the `forEach()` method iterates over the array without the need of an explicitly defined index. In the example above, `donut` corresponds to the element in the array itself. This is different from a `for` or `while` loop where an index is used to access each element in the array:

{% highlight js %}
for (var i = 0; i < donuts.length; i++) {
  donuts[i] += " hole";
  donuts[i] = donuts[i].toUpperCase();
  console.log(donuts[i]);
}
{% endhighlight %}

##### Parameters

The function that you pass to the `forEach()` method can take up to three parameters. In the video, these are called `element`, `index`, and `array`, but you can call them whatever you like.

The `forEach()` method will call this function once for each element in the array (hence the name `forEach`.) Each time, it will call the function with different arguments. The `element` parameter will get the value of the array element. The `index` parameter will get the index of the element (starting with zero). The `array` parameter will get a reference to the whole array, which is handy if you want to modify the elements.

Here's another example:

{% highlight js %}
words = ["cat", "in", "hat"];
words.forEach(function(word, num, all) {
  console.log("Word " + num + " in " + all.toString() + " is " + word);
});
{% endhighlight %}

Console will print:

`Word 0 in cat,in,hat is cat

Word 1 in cat,in,hat is in

Word 2 in cat,in,hat is hat`


##### Example

Use the array's `forEach()` [method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach) to loop over the following array and add `100` to each of the values if the value is divisible by `3`.

var test = [12, 929, 11, 3, 199, 1000, 7, 1, 24, 37, 4, 19, 300, 3775, 299, 36, 209, 148, 169, 299, 6, 109, 20, 58, 139, 59, 3, 1, 139];

{% highlight js %}
var test = [12, 929, 11, 3, 199, 1000, 7, 1, 24, 37, 4,
    19, 300, 3775, 299, 36, 209, 148, 169, 299,
    6, 109, 20, 58, 139, 59, 3, 1, 139
];

test.forEach(function(number, index, all) {
var divThree = number % 3;
if (divThree === 0){
test[index] = number + 100;
}
console.log(test[index]);
});
{% endhighlight %}

Console will print:

{% highlight js %}
112
929
11
103
199
1000
7
1
124
37
4
19
400
3775
299
136
209
148
169
299
106
109
20
58
139
59
103
1
139
{% endhighlight %}

### Map

Using `forEach()` will not be useful if you want to permanently modify the original array. `forEach()` always returns `undefined`. However, creating a new array from an existing array is simple with the powerful `map()` method.

With the [`map()` method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map), you can take an array, perform some operation on each element of the array, and return a new array.

{% highlight js %}
var donuts = ["jelly donut", "chocolate donut", "glazed donut"];

var improvedDonuts = donuts.map(function(donut) {
  donut += " hole";
  donut = donut.toUpperCase();
  return donut;
});
{% endhighlight %}

donuts array: `["jelly donut", "chocolate donut", "glazed donut"]`

improvedDonuts array: `["JELLY DONUT HOLE", "CHOCOLATE DONUT HOLE", "GLAZED DONUT HOLE"]`

ðŸ’¥ The `map()` method accepts one argument, a function that will be used to manipulate each element in the array. In the above example, we used a function expression to pass that function into `map()`. This function is taking in one argument, `donut` which corresponds to each element in the `donuts` array. You no longer need to iterate over the indices anymore. `map()` does all that work for you.

##### Example

Use the [`map()` method](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map) to take the array of bill amounts shown below, and create a second array of numbers called `totals` that shows the bill amounts with a 15% tip added.

var bills = [50.23, 19.12, 34.01, 100.11, 12.15, 9.90, 29.11, 12.99, 10.00, 99.22, 102.20, 100.10, 6.77, 2.22];

Print out the new `totals` array using `console.log`.

ðŸ’¥ Check out the `toFixed()` method for numbers to help with [rounding](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed) the values to a maximum of 2 decimal places. Note, that the method returns a string to maintain the "fixed" format of the number. So, if you want to convert the string back to a number, you can cast it or convert it back to a number:

`Number("1");`

Console will print: `1`

{% highlight js %}
var bills = [50.23, 19.12, 34.01,
    100.11, 12.15, 9.90, 29.11, 12.99,
    10.00, 99.22, 102.20, 100.10, 6.77, 2.22];

var totals = bills.map(function(bill) {
    bill = bill * 1.15;
    bill = Number(bill.toFixed(2));
    return bill;
});

console.log (totals);
{% endhighlight %}

Console will print:

{% highlight js %}
[ 57.76,
  21.99,
  39.11,
  115.13,
  13.97,
  11.38,
  33.48,
  14.94,
  11.5,
  114.1,
  117.53,
  115.11,
  7.79,
  2.55 ]
{% endhighlight %}

### Arrays in Arrays

Grid like arrays with rolls and columns.

You could use an array of arrays that has the name of each donut associated with its position in the box.

Here's an example:

{% highlight js %}
var donutBox = [
  ["glazed", "chocolate glazed", "cinnamon"],
  ["powdered", "sprinkled", "glazed cruller"],
  ["chocolate cruller", "Boston creme", "creme de leche"]
];
{% endhighlight %}

If you wanted to loop over the donut box and display each donut (along with its position in the box!) you would start with writing a for loop to loop over each row of the box of donuts:

{% highlight js %}
var donutBox = [
  ["glazed", "chocolate glazed", "cinnamon"],
  ["powdered", "sprinkled", "glazed cruller"],
  ["chocolate cruller", "Boston creme", "creme de leche"]
];

// here, donutBox.length refers to the number of rows of donuts
for (var row = 0; row < donutBox.length; row++) {
  console.log(donutBox[row]);
}
{% endhighlight %}

Console will print:

`["glazed", "chocolate glazed", "cinnamon"]

["powdered", "sprinkled", "glazed cruller"]

["chocolate cruller", "Boston creme", "creme de leche"]`

Since each row is an array of donuts, you next need to set up an inner-loop to loop over each cell in the arrays.

{% highlight js %}
for (var row = 0; row < donutBox.length; row++) {
  // here, donutBox[row].length refers to the length of the donut array currently being looped over
  for (var column = 0; column < donutBox[row].length; column++) {
    console.log(donutBox[row][column]);
  }
}
{% endhighlight %}

Console will print:

`"glazed"

"chocolate glazed"

"cinnamon"

"powdered"

"sprinkled"

"glazed cruller"

"chocolate cruller"

"Boston creme"

"creme de leche"`

##### Example

Use a nested `for` loop to take the `numbers` array below and replace all of the values that are divisible by `2` (even numbers) with the string "even" and all other numbers with the string "odd".

{% highlight js %}
var numbers = [
    [243, 12, 23, 12, 45, 45, 78, 66, 223, 3],
    [34, 2, 1, 553, 23, 4, 66, 23, 4, 55],
    [67, 56, 45, 553, 44, 55, 5, 428, 452, 3],
    [12, 31, 55, 445, 79, 44, 674, 224, 4, 21],
    [4, 2, 3, 52, 13, 51, 44, 1, 67, 5],
    [5, 65, 4, 5, 5, 6, 5, 43, 23, 4424],
    [74, 532, 6, 7, 35, 17, 89, 43, 43, 66],
    [53, 6, 89, 10, 23, 52, 111, 44, 109, 80],
    [67, 6, 53, 537, 2, 168, 16, 2, 1, 8],
    [76, 7, 9, 6, 3, 73, 77, 100, 56, 100]
];
{% endhighlight %}

{% highlight js %}
var numbers = [
    [243, 12, 23, 12, 45, 45, 78, 66, 223, 3],
    [34, 2, 1, 553, 23, 4, 66, 23, 4, 55],
    [67, 56, 45, 553, 44, 55, 5, 428, 452, 3],
    [12, 31, 55, 445, 79, 44, 674, 224, 4, 21],
    [4, 2, 3, 52, 13, 51, 44, 1, 67, 5],
    [5, 65, 4, 5, 5, 6, 5, 43, 23, 4424],
    [74, 532, 6, 7, 35, 17, 89, 43, 43, 66],
    [53, 6, 89, 10, 23, 52, 111, 44, 109, 80],
    [67, 6, 53, 537, 2, 168, 16, 2, 1, 8],
    [76, 7, 9, 6, 3, 73, 77, 100, 56, 100]
];

for (var r = 0; r < numbers.length; r++) {
for (var c = 0; c < numbers[r].length; c++) {
    if (numbers[r][c] % 2 ===0) {
        numbers[r][c] = "even";
    } else {
        numbers[r][c] = "odd";
    }
}
}
console.log(numbers);
{% endhighlight %}
