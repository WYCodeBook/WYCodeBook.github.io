---
layout: post
title: "Strings"
date: "2018-08-15 17:22:11 -0700"
categories: JavaScript
description: Different Strings in JavaScript
---

Strings are a collection of characters enclosed inside double or single quotes. You can use strings to represent data like sentences, names, addresses, and more.

It is correct to either use double `"` or single `'` quotes with strings, as long as you're consistent.

## String Concatenation

Did you know you can even add strings together? In JavaScript, this is called concatenating. Concatenating two strings together is actually pretty simple!

Entering `"Hello," + " New York City"`

Console will print: Hello, New York City

ðŸ’¥ For consistency single-quotes `(')` are preferred over double-quotes `(")`. This is helpful when creating strings that include HTML: `const element = '<button class="btn">Click Me</button>';`

## String Index

Did you know that you can access individual characters in a string? To access an individual character, you can use the character's location in the string, called its index. Just put the index of the character inside square brackets (starting with [0] as the first character) immediately after the string.

#### For example:

Entering `"James"[0];`

Console will print: J

...or more commonly, you will see it like this, using a variable:

`var name = "James";
name[0];`

Console will print: J

#### More Examples...

{% highlight js %}

var quote = "Stay awhile and listen!";

console.log(quote[6]);

{% endhighlight %}

Console will print: w

ðŸ’¥ Alternatively, you can use the Stringâ€™s `charAt()` method to access individual characters. For example, `quote.charAt(6)` would also return `"w"`.

## Escaping Strings

There are some cases where you might want to create a string that contains more than just numbers and letters. For example, what if you want to use quotes in a string?

Entering `"The man whispered, "please speak to me.""`

Console will print: Unexpected identifier

If you try to use quotes within a string, you will receive a `SyntaxError` like the one above.

Because you need to use quotes to denote the beginning and end of strings, the JavaScript engine misinterprets the meaning of your string by thinking `"The man whispered, "` is the string. Then, it sees the remaining `please speak to me.""` and returns a `SyntaxError`.

If you want to use quotes inside a string, and have JavaScript not misunderstand your intentions, youâ€™ll need a different way to write quotes. Thankfully, JavaScript has a way to do this using the backslash character `( \ )`.

#### Escaping characters

In JavaScript, you use the backslash to `escape` other characters.

Escaping a character tells JavaScript to ignore the character's special meaning and just use the literal value of the character. This is helpful for characters that have special meanings like in our previous example with quotes `"â€¦"`.

Because quotes are used to signify the beginning and end of a string, you can use the backslash character to escape the quotes in order to access the literal quote character.

Entering `"The man whispered, \"please speak to me.\""`

Console will print: The man whispered, "please speak to me."

This guarantees that the JavaScript engine doesnâ€™t misinterpret the string and result in an error.

#### Special characters

Quotes arenâ€™t the only special characters that need to be escaped, thereâ€™s actually quite a few. However, to keep it simple, hereâ€™s a list of some common special characters in JavaScript.

![Special Characters](/pic/specialcharacters.PNG)

The last two characters listed in the table, newline `\n` and tab `\t`, are unique because they add additional whitespace to your Strings. A newline character will add a line break and a tab character will advance your line to the next tab stop.

Entering `"Up up\n\tdown down"`

Console will print:

{% highlight js %}
Up up
â€ƒdown down
{% endhighlight %}

#### ðŸ‘“ Read more at:

- [MDN Grammar and types](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Grammar_and_types#Using_special_characters_in_strings)

- [Tab Stop](https://en.wikipedia.org/wiki/Tab_stop)

## Comparing Strings

Another way to work with strings is by comparing them. You've seen the comparison operators `==` and `!=` when you compared numbers for equality. You can also use them with strings! For example, letâ€™s compare the string `"Yes"` to `"yes"`.

Entering `"Yes" == "yes"`

Console will print: false

When you run this in the console, it returns false. Why is that? "Yes" and "yes" are the same string, right? Well not quite.

#### Case-sensitive

When you compare strings, case matters. While both string use the same letters (and those letters appear in the same order), the first letter in the first string is a capital `Y` while the first letter in the second string is a lowercase `y`.

Entering `'Y' != 'y'`

Console will print: true

#### ðŸ‘“ Read more at:
- [ASCII Code](https://www.ascii-code.com/)
