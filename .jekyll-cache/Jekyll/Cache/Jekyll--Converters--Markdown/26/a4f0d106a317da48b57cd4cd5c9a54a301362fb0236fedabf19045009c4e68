I""<h1 id="problem">Problem</h1>

<p><a href="https://leetcode.com/explore/challenge/card/30-day-leetcoding-challenge/">30-Day LeetCoding Challenge for April 2020</a></p>

<p>Given an array <code class="language-plaintext highlighter-rouge">nums</code>, write a function to move all <code class="language-plaintext highlighter-rouge">0</code>â€™s to the end of it while maintaining the relative order of the non-zero elements.</p>

<p>Example:</p>

<p><code class="language-plaintext highlighter-rouge">Input: [0,1,0,3,12]</code></p>

<p>Output: [1,3,12,0,0]</p>

<p>Note:</p>

<ol>
  <li>
    <p>You must do this in-place without making a copy of the array.</p>
  </li>
  <li>
    <p>Minimize the total number of operations.</p>
  </li>
</ol>

<h3 id="hint1">Hint#1</h3>

<p>In-place means we should not be allocating any space for extra array. But we are allowed to modify the existing array. However, as a first step, try coming up with a solution that makes use of additional space. For this problem as well, first apply the idea discussed using an additional array and the in-place solution will pop up eventually.</p>

<h3 id="hint2">Hint#2</h3>

<p>A two-pointer approach could be helpful here. The idea would be to have one pointer for iterating the array and another pointer that just works on the non-zero elements of the array.</p>

<h1 id="solution">Solution</h1>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="cm">/**
 * @param {number[]} nums
 * @return {void} Do not return anything, modify nums in-place instead.
 */</span>
<span class="kd">var</span> <span class="nx">moveZeroes</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">nums</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">(</span><span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">nums</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">!==</span><span class="mi">0</span><span class="p">){</span>
            <span class="nx">nums</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="nx">nums</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span>
            <span class="nx">j</span><span class="o">++</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="nx">i</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">j</span><span class="p">);</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">nums</span><span class="p">);</span>

    <span class="k">while</span> <span class="p">(</span><span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">nums</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span>
        <span class="nx">nums</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
        <span class="nx">j</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">nums</span><span class="p">;</span>
<span class="p">};</span></code></pre></figure>

:ET