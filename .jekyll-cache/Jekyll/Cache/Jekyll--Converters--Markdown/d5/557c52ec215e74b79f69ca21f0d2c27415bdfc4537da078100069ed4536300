I"n<h1 id="problem">Problem:</h1>

<p>You’re given strings J representing the types of stones that are jewels, and S representing the stones you have.  Each character in S is a type of stone you have.  You want to know how many of the stones you have are also jewels.</p>

<p>The letters in J are guaranteed distinct, and all characters in J and S are letters. Letters are case sensitive, so “a” is considered a different type of stone from “A”.</p>

<p><a href="https://leetcode.com/problems/jewels-and-stones/">Leetcode - Jewels and Stones</a></p>

<p>Example 1:</p>

<p><code class="language-plaintext highlighter-rouge">Input: J = "aA", S = "aAAbbbb"</code></p>

<p>Output: 3</p>

<p>Example 2:</p>

<p><code class="language-plaintext highlighter-rouge">Input: J = "z", S = "ZZ"</code></p>

<p>Output: 0</p>

<p>Note:</p>

<p><code class="language-plaintext highlighter-rouge">S</code> and <code class="language-plaintext highlighter-rouge">J</code> will consist of letters and have length at most 50.
The characters in <code class="language-plaintext highlighter-rouge">J</code> are distinct.</p>

<h1 id="solution">Solution:</h1>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="cm">/**
 * @param {string} J
 * @param {string} S
 * @return {number}
 **/</span>
<span class="kd">var</span> <span class="nx">numJewelsInStones</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">J</span><span class="p">,</span> <span class="nx">S</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">i</span><span class="o">&lt;</span><span class="nx">J</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="nx">k</span><span class="o">&lt;</span><span class="nx">S</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">k</span><span class="o">++</span><span class="p">){</span>
            <span class="k">if</span> <span class="p">(</span><span class="nx">J</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">includes</span><span class="p">(</span><span class="nx">S</span><span class="p">[</span><span class="nx">k</span><span class="p">])){</span>
                <span class="nx">count</span><span class="o">++</span>
            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="nx">count</span><span class="p">;</span>
<span class="p">};</span></code></pre></figure>

:ET