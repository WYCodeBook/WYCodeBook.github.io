I"<h1 id="problem">Problem</h1>

<p>We have a collection of stones, each stone has a positive integer weight.</p>

<p>Each turn, we choose the two heaviest stones and smash them together.  Suppose the stones have weights <code class="language-plaintext highlighter-rouge">x</code> and <code class="language-plaintext highlighter-rouge">y</code> with <code class="language-plaintext highlighter-rouge">x &lt;= y</code>.  The result of this smash is:</p>

<p>If <code class="language-plaintext highlighter-rouge">x == y</code>, both stones are totally destroyed;</p>

<p>If <code class="language-plaintext highlighter-rouge">x != y</code>, the stone of weight <code class="language-plaintext highlighter-rouge">x</code> is totally destroyed, and the stone of weight <code class="language-plaintext highlighter-rouge">y</code> has new weight <code class="language-plaintext highlighter-rouge">y-x</code>.</p>

<p>At the end, there is at most 1 stone left.  Return the weight of this stone (or 0 if there are no stones left.)</p>

<p>Example:</p>

<p>Input: <code class="language-plaintext highlighter-rouge">[2,7,4,1,8,1]</code></p>

<p>Output: 1</p>

<p>Explanation:</p>

<p>We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,
we combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,
we combine 2 and 1 to get 1 so the array converts to [1,1,1] then,
we combine 1 and 1 to get 0 so the array converts to [1] then thatâ€™s the value of last stone.</p>

<p>Note:</p>

<p>1 &lt;= stones.length &lt;= 30</p>

<p>1 &lt;= stones[i] &lt;= 1000</p>

<h1 id="solution">Solution</h1>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="cm">/**
 * @param {number[]} stones
 * @return {number}
 */</span>
<span class="kd">var</span> <span class="nx">lastStoneWeight</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">stones</span><span class="p">)</span> <span class="p">{</span>

    <span class="k">while</span><span class="p">(</span><span class="nx">stones</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">){</span>
        <span class="nx">stones</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="o">-</span><span class="nx">a</span><span class="p">});</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">stones</span><span class="p">);</span>
        <span class="kd">let</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>


        <span class="k">if</span> <span class="p">(</span><span class="nx">stones</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">==</span> <span class="nx">stones</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]){</span>
            <span class="nx">stones</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="nx">stones</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="nx">stones</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]){</span>
            <span class="kd">let</span> <span class="nx">num1</span> <span class="o">=</span> <span class="nx">stones</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
            <span class="kd">let</span> <span class="nx">num2</span> <span class="o">=</span> <span class="nx">stones</span><span class="p">.</span><span class="nx">shift</span><span class="p">();</span>
            <span class="nx">stones</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">num1</span> <span class="o">-</span> <span class="nx">num2</span><span class="p">);</span>

        <span class="p">}</span>

    <span class="p">}</span>

    <span class="k">if</span><span class="p">(</span><span class="nx">stones</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span>
        <span class="k">return</span> <span class="nx">stones</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">if</span><span class="p">(</span><span class="nx">stones</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">stones</span><span class="p">);</span>
<span class="p">};</span></code></pre></figure>

<h1 id="note">Note</h1>

<p><a href="https://www.w3schools.com/jsref/jsref_sort.asp">JavaScript Array sort() Method</a></p>

<p><a href="https://www.w3schools.com/jsref/jsref_push.asp">JavaScript Array push() Method</a></p>

<p><a href="https://www.w3schools.com/jsref/jsref_shift.asp">JavaScript Array shift() Method</a></p>

<p><a href="https://www.w3schools.com/jsref/jsref_splice.asp">JavaScript Array splice() Method</a></p>
:ET